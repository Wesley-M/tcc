{"Scikit-Opt": ["[![codecov](https://codecov.io/gh/guofei9987/scikit-opt/branch/master/graph/badge.svg)](https://codecov.io/gh/guofei9987/scikit-opt)", "- [de curso, t. d. c. (2021). estudo do modelo johansen-ledoit-sornette de bolhas financeiras.](https://d1wqtxts1xzle7.cloudfront.net/67649721/tcc_thibor_final-with-cover-page-v2.pdf?expires=1639140872&signature=ldzovsago0mlmlvsqjnzpllrhlyt5wdidmbjm1ywog5bsx6apyre9ahuwfnfnc96uvam573wihmev08qlk2vhrcqs1d0buenbt5fworuq6ptdomsxmpbb-lgtu9etimb4sbyvcqb-x3c7hh0ec1fojz040gxjpwdali3e1tdocgrnoabzmgniyx6akfizaaxmiqev3418~870bh4ioqxoapie6-23lcol-32t~fsjsorenolukcosv6uhpourkgsrufay-c2hbuwp36ij7coh0jsto1e45dvgvqndvshz7tmei~0upgh-a8mwzq9h2elcbcn~unq8ycxoa4tukfpcw__&key-pair-id=apkajlohf5ggslrbv4za)"], "deepface": ["face recognition, facial attribute analysis and vector representation functions are covered in the api. you are expected to call these functions as http post methods. default service endpoints will be `http://localhost:5000/verify` for face recognition, `http://localhost:5000/analyze` for facial attribute analysis, and `http://localhost:5000/represent` for vector representation. you can pass input images as exact image paths on your environment, base64 encoded strings or images on web. [here](https://github.com/serengil/deepface/tree/master/api), you can find a postman project to find out how these methods should be called."], "Detectron": ["after installation, please see [`getting_started.md`](getting_started.md) for brief tutorials covering inference and training with detectron."], "Self-supervised learning": ["[![codecov](https://codecov.io/gh/lightning-ai/lightning-bolts/branch/master/graph/badge.svg?token=o8p0qhvj90)](https://codecov.io/gh/lightning-ai/lightning-bolts)"], "Deep High-Resolution-Net": ["in this work, we are interested in the human pose estimation problem with a focus on learning reliable high-resolution representations. most existing methods **recover high-resolution representations from low-resolution representations** produced by a high-to-low resolution network. instead, our proposed network **maintains high-resolution representations** through the whole process."], "Lucent": ["[![code coverage](https://img.shields.io/coveralls/github/greentfrapp/lucent.svg)](https://coveralls.io/github/greentfrapp/lucent)"], "lightly": ["![codecov](https://codecov.io/gh/lightly-ai/lightly/branch/master/graph/badge.svg?token=1neavrok3w)", "- [dpcl: constrative representation learning with differential privacy](https://assets.researchsquare.com/files/rs-1516950/v1_covered.pdf?c=1654486158)"], "IoT Owl": ["                    \"noseandmouthcovered\": false,"], "Pattern": ["[![coverage](https://img.shields.io/coveralls/clips/pattern/master.svg?style=flat)](https://coveralls.io/github/clips/pattern?branch=master)"], "spammy": ["|pypi version| |build status| |python versions| |percentagecov| |requirements status| |license| ", ".. |percentagecov| image:: https://api.codacy.com/project/badge/coverage/e2cb32eae16242f795f498d40d0d8984"], "KoNLPy": [".. image:: https://img.shields.io/coveralls/konlpy/konlpy.svg", "    :target: https://coveralls.io/r/konlpy/konlpy", "    :alt: coverage status"], "Rosetta": ["*rosetta* refers to the [rosetta stone](http://en.wikipedia.org/wiki/rosetta_stone), the ancient egyptian tablet discovered just over 200 years ago. the tablet contained fragmented text in three different languages and the uncovering of its meaning is considered an essential key to our understanding of ancient egyptian civilization. we would like this project to provide individuals the necessary tools to process and unearth insight in the ever-growing volumes of textual data of today."], "PySS3": ["[![codecov](https://codecov.io/gh/sergioburdisso/pyss3/branch/master/graph/badge.svg)](https://codecov.io/gh/sergioburdisso/pyss3)"], "PyStanfordDependencies": [".. image:: https://coveralls.io/repos/dmcc/pystanforddependencies/badge.png?branch=master", "   :target: https://coveralls.io/r/dmcc/pystanforddependencies?branch=master", "- 0.1.3 (2015.01.03): bugfixes, coveralls integration, refactoring"], "jellyfish": ["[![coveralls](https://coveralls.io/repos/jamesturk/jellyfish/badge.png?branch=master)](https://coveralls.io/r/jamesturk/jellyfish)"], "stanford-corenlp-python": ["this is free and open source software and has benefited from the contribution and feedback of others.  like stanford's corenlp tools, it is covered under the [gnu general public license v2 +](http://www.gnu.org/licenses/gpl-2.0.html), which in short means that modifications to this program must maintain the same free and open source distribution policy."], "CLTK": [".. |codecov| image:: https://codecov.io/gh/cltk/cltk/branch/master/graph/badge.svg", "   :target: https://codecov.io/gh/cltk/cltk"], "Rasa": ["[![coverage status](https://api.codeclimate.com/v1/badges/756dc6fea1d5d3e127f7/test_coverage)](https://codeclimate.com/github/rasahq/rasa/)"], "Dedupe": ["[![tests passing](https://github.com/dedupeio/dedupe/workflows/tests/badge.svg)](https://github.com/dedupeio/dedupe/actions?query=workflow%3atests)[![codecov](https://codecov.io/gh/dedupeio/dedupe/branch/main/graph/badge.svg?token=aaukurtegh)](https://codecov.io/gh/dedupeio/dedupe)"], "Snips NLU": [".. image:: https://codecov.io/gh/snipsco/snips-nlu/branch/master/graph/badge.svg", "   :target: https://codecov.io/gh/snipsco/snips-nlu"], "RexMex": ["[![codecov](https://codecov.io/gh/astrazeneca/rexmex/branch/main/graph/badge.svg?token=cygaejra0z)](https://codecov.io/gh/astrazeneca/rexmex)", "**rexmex** consists of utilities for recommender system evaluation. first, it provides a comprehensive collection of metrics for the evaluation of recommender systems. second, it includes a variety of methods for reporting and plotting the performance results. implemented metrics cover a range of well-known metrics and newly proposed metrics from data mining ([icdm](http://icdm2019.bigke.org/), [cikm](http://www.cikm2019.net/), [kdd](https://www.kdd.org/kdd2020/)) conferences and prominent journals.", "a **rexmex** score card allows the reporting of recommender system performance metrics, plotting the performance metrics and saving those. our framework provides 7 rating, 38 classification, 18 ranking, and 2 coverage metrics.", "- **coverage**", "**coverage metric set**", "these metrics measure how well the recommender system covers the available items in the catalog and possible users. ", "* **[item coverage](https://www.bgu.ac.il/~shanigu/publications/evaluationmetrics.17.pdf)**", "* **[user coverage](https://www.bgu.ac.il/~shanigu/publications/evaluationmetrics.17.pdf)**"], "ChemicalX": ["[coverage-image]: https://codecov.io/gh/astrazeneca/chemicalx/branch/main/graph/badge.svg", "[coverage-url]: https://codecov.io/github/astrazeneca/chemicalx?branch=main", "[![code coverage][coverage-image]][coverage-url]", "*chemicalx* is a deep learning library for drug-drug interaction, polypharmacy side effect, and synergy prediction. the library consists of data loaders and integrated benchmark datasets. it also includes state-of-the-art deep neural network architectures that solve the [drug pair scoring task](https://arxiv.org/pdf/2111.02916v4.pdf). implemented methods cover traditional smiles string based techniques and neural message passing based models.", "  booktitle = {proceedings of the 28th acm sigkdd conference on knowledge discovery and data mining},", "we provide in-depth case study like tutorials in the\u00a0[documentation](https://chemicalx.readthedocs.io/en/latest/), each covers an aspect of chemicalx\u2019s functionality."], "Shapley": ["[coverage-image]: https://codecov.io/gh/benedekrozemberczki/shapley/branch/master/graph/badge.svg", "[coverage-url]: https://codecov.io/github/benedekrozemberczki/shapley?branch=master", "[![code coverage][coverage-image]][coverage-url]", "the library consists of various methods to compute (approximate) the shapley value of players (models) in weighted voting games (ensemble games) - a class of transferable utility cooperative games. we covered the exact enumeration based computation and various widely know approximation methods from economics and computer science research papers. there are also functionalities to identify the heterogeneity of the player pool based on the [shapley entropy](https://arxiv.org/abs/2101.02153). in addition, the framework comes with a [detailed documentation](https://shapley.readthedocs.io/en/latest/), an intuitive [tutorial](https://shapley.readthedocs.io/en/latest/notes/introduction.html), 100% test coverage, and illustrative toy [examples](https://github.com/benedekrozemberczki/shapley/tree/master/examples)."], "PyTorch Geometric Temporal": ["[coverage-image]: https://codecov.io/gh/benedekrozemberczki/pytorch_geometric_temporal/branch/master/graph/badge.svg", "[coverage-url]: https://codecov.io/github/benedekrozemberczki/pytorch_geometric_temporal?branch=master", "[![code coverage][coverage-image]][coverage-url]", "we provide in-depth case study tutorials in the\u00a0[documentation](https://pytorch-geometric-temporal.readthedocs.io/en/latest/), each covers an aspect of pytorch geometric temporal\u2019s functionality."], "Little Ball of Fur": ["![version](https://badge.fury.io/py/littleballoffur.svg?style=plastic) [![repo size](https://img.shields.io/github/repo-size/benedekrozemberczki/littleballoffur.svg)](https://github.com/benedekrozemberczki/littleballoffur/archive/master.zip) [![arxiv](https://img.shields.io/badge/arxiv-2006.04311-orange.svg)](https://arxiv.org/abs/2006.04311) [![build badge](https://github.com/benedekrozemberczki/littleballoffur/workflows/ci/badge.svg)](https://github.com/benedekrozemberczki/littleballoffur/actions?query=workflow%3aci) [![coverage badge](https://codecov.io/gh/benedekrozemberczki/littleballoffur/branch/master/graph/badge.svg)](https://codecov.io/github/benedekrozemberczki/littleballoffur?branch=master) [![benedekrozemberczki](https://img.shields.io/twitter/follow/benrozemberczki?style=social&logo=twitter)](https://twitter.com/intent/follow?screen_name=benrozemberczki)", "**little ball of fur** consists of methods that can sample from graph structured data. to put it simply it is a swiss army knife for graph sampling tasks. first, it includes a large variety of vertex, edge, and exploration sampling techniques. second, it provides a unified application public interface which makes the application of sampling algorithms trivial for end-users. implemented methods cover a wide range of networking ([networking](https://link.springer.com/conference/networking), [infocom](https://infocom2020.ieee-infocom.org/), [sigcomm](http://www.sigcomm.org/)) and data mining ([kdd](https://www.kdd.org/kdd2020/), [tkdd](https://dl.acm.org/journal/tkdd), [icde](http://www.wikicfp.com/cfp/program?id=1331&s=icde&f=international%20conference%20on%20data%20engineering)) conferences, workshops, and pieces from prominent journals. ", "* **[loop-erased random walk sampler](https://little-ball-of-fur.readthedocs.io/en/latest/modules/exploration_sampling.html#littleballoffur.exploration_sampling.looperasedrandomwalksampler.looperasedrandomwalksampler)** from wilson: [generating random spanning trees more quickly than the cover time](https://link.springer.com/chapter/10.1007/978-1-4612-2168-5_12) (stoc 1996)"], "Karate Club": [" [![coverage badge](https://codecov.io/gh/benedekrozemberczki/karateclub/branch/master/graph/badge.svg)](https://codecov.io/github/benedekrozemberczki/karateclub?branch=master)", "*karate club* consists of state-of-the-art methods to do unsupervised learning on graph structured data. to put it simply it is a swiss army knife for small-scale graph mining research. first, it provides network embedding techniques at the node and graph level. second, it includes a variety of overlapping and non-overlapping community detection methods. implemented methods cover a wide range of network science ([netsci](https://netscisociety.net/home), [complenet](https://complenet.weebly.com/)), data mining ([icdm](http://icdm2019.bigke.org/), [cikm](http://www.cikm2019.net/), [kdd](https://www.kdd.org/kdd2020/)), artificial intelligence ([aaai](http://www.aaai.org/conferences/conferences.php), [ijcai](https://www.ijcai.org/)) and machine learning ([neurips](https://nips.cc/), [icml](https://icml.cc/), [iclr](https://iclr.cc/)) conferences, workshops, and pieces from prominent journals."], "PyOD": [".. image:: https://coveralls.io/repos/github/yzhao062/pyod/badge.svg", "   :target: https://coveralls.io/github/yzhao062/pyod", "   :alt: coverage status", "linear model         mcd                 minimum covariance determinant (use the mahalanobis distances as the outlier scores)                    1999   [#hardin2004outlier]_ [#rousseeuw1999a]_", "proximity-based      cblof               clustering-based local outlier factor                                                                   2003   [#he2003discovering]_", ".. [#angiulli2002fast] angiulli, f. and pizzuti, c., 2002, august. fast outlier detection in high dimensional spaces. in *european conference on principles of data mining and knowledge discovery* pp. 15-27.", ".. [#hardin2004outlier] hardin, j. and rocke, d.m., 2004. outlier detection in the multiple cluster setting using the minimum covariance determinant estimator. *computational statistics & data analysis*\\ , 44(4), pp.625-638.", ".. [#he2003discovering] he, z., xu, x. and deng, s., 2003. discovering cluster-based local outliers. *pattern recognition letters*\\ , 24(9-10), pp.1641-1650.", ".. [#kriegel2009outlier] kriegel, h.p., kr\u00f6ger, p., schubert, e. and zimek, a., 2009, april. outlier detection in axis-parallel subspaces of high dimensional data. in *pacific-asia conference on knowledge discovery and data mining*\\ , pp. 831-838. springer, berlin, heidelberg.", ".. [#perini2020quantifying] perini, l., vercruyssen, v., davis, j. quantifying the confidence of anomaly detectors in their example-wise predictions. in *joint european conference on machine learning and knowledge discovery in databases (ecml-pkdd)*, 2020.", ".. [#rousseeuw1999a] rousseeuw, p.j. and driessen, k.v., 1999. a fast algorithm for the minimum covariance determinant estimator. *technometrics*\\ , 41(3), pp.212-223.", ".. [#schlegl2017unsupervised] schlegl, t., seeb\u00f6ck, p., waldstein, s.m., schmidt-erfurth, u. and langs, g., 2017, june. unsupervised anomaly detection with generative adversarial networks to guide marker discovery. in international conference on information processing in medical imaging (pp. 146-157). springer, cham.", ".. [#tang2002enhancing] tang, j., chen, z., fu, a.w.c. and cheung, d.w., 2002, may. enhancing effectiveness of outlier detections for low density patterns. in *pacific-asia conference on knowledge discovery and data mining*, pp. 535-548. springer, berlin, heidelberg."], "auto_ml": ["[![coverage status](https://coveralls.io/repos/github/climbsrocks/auto_ml/badge.svg?branch=master&cachebuster=1)](https://coveralls.io/github/climbsrocks/auto_ml?branch=master&cachebuster=1)"], "machine learning": ["# machine learning [![build status](https://travis-ci.org/jeff1evesque/machine-learning.svg?branch=master)](https://travis-ci.org/jeff1evesque/machine-learning) [![coverage status](https://coveralls.io/repos/github/jeff1evesque/machine-learning/badge.svg?branch=master)](https://coveralls.io/github/jeff1evesque/machine-learning?branch=master)"], "XGBoost": ["- tianqi chen and carlos guestrin. [xgboost: a scalable tree boosting system](http://arxiv.org/abs/1603.02754). in 22nd sigkdd conference on knowledge discovery and data mining, 2016"], "ChefBoost": ["**chefboost** is a lightweight decision tree framework for python **with categorical feature support**. it covers regular decision tree algorithms: [id3](https://sefiks.com/2017/11/20/a-step-by-step-id3-decision-tree-example/), [c4.5](https://sefiks.com/2018/05/13/a-step-by-step-c4-5-decision-tree-example/), [cart](https://sefiks.com/2018/08/27/a-step-by-step-cart-decision-tree-example/), [chaid](https://sefiks.com/2020/03/18/a-step-by-step-chaid-decision-tree-example/) and [regression tree](https://sefiks.com/2018/08/28/a-step-by-step-regression-decision-tree-example/); also some advanved techniques: [gradient boosting](https://sefiks.com/2018/10/04/a-step-by-step-gradient-boosting-decision-tree-example/), [random forest](https://sefiks.com/2017/11/19/how-random-forests-can-keep-you-from-decision-tree/) and [adaboost](https://sefiks.com/2018/11/02/a-step-by-step-adaboost-example/). you just need to write **a few lines of code** to build decision trees with chefboost."], "Apache SINGA": ["[![codecov](https://codecov.io/gh/apache/singa/branch/master/graph/badge.svg)](https://codecov.io/gh/apache/singa)"], "Towhee": ["  <a href=\"https://app.codecov.io/gh/towhee-io/towhee\">", "    <img src=\"https://img.shields.io/codecov/c/github/towhee-io/towhee?style=flat\" alt=\"coverage\"/>"], "scikit-learn": ["|azure|_ |travis|_ |cirrusci|_ |codecov|_ |circleci|_ |nightly wheels|_ |black|_ |pythonversion|_ |pypi|_ |doi|_ |benchmark|_", ".. |codecov| image:: https://codecov.io/gh/scikit-learn/scikit-learn/branch/main/graph/badge.svg?token=pk8g9gg3y9", ".. _codecov: https://codecov.io/gh/scikit-learn/scikit-learn", "see the web page https://scikit-learn.org/dev/developers/contributing.html#testing-and-improving-test-coverage"], "metric-learn": ["|github actions build status| |license| |pypi version| |code coverage|", ".. |code coverage| image:: https://codecov.io/gh/scikit-learn-contrib/metric-learn/branch/master/graph/badge.svg", "   :target: https://codecov.io/gh/scikit-learn-contrib/metric-learn"], "Intel(R) Extension for Scikit-learn": ["[![coverity scan build status](https://scan.coverity.com/projects/21716/badge.svg)](https://scan.coverity.com/projects/daal4py)", "### \u2753 what if the patching does not cover my scenario?", "> if the patching does not cover your scenarios, [submit an issue on github](https://github.com/intel/scikit-learn-intelex/issues) with the description of what you would want to have."], "Lasagne": [".. image:: https://img.shields.io/coveralls/lasagne/lasagne.svg", "    :target: https://coveralls.io/r/lasagne/lasagne"], "Chainer": ["[![coveralls](https://img.shields.io/coveralls/chainer/chainer.svg)](https://coveralls.io/github/chainer/chainer)", "tokui, seiya, et al. \"chainer: a deep learning framework for accelerating the research cycle.\" *proceedings of the 25th acm sigkdd international conference on knowledge discovery & data mining*. acm, 2019."], "topik": ["[![coverage status](https://coveralls.io/repos/continuumio/topik/badge.svg?branch=master&service=github)](https://coveralls.io/github/continuumio/topik?branch=master)"], "Restricted Boltzmann Machines": ["restricted boltzmann machines essentially perform a *binary* version of factor analysis. (this is one way of thinking about rbms; there are, of course, others, and lots of different ways to use rbms, but i'll adopt this approach for this post.) instead of users rating a set of movies on a continuous scale, they simply tell you whether they like a movie or not, and the rbm will try to discover latent factors that can explain the activation of these movie choices."], "nilearn": [".. image:: https://codecov.io/gh/nilearn/nilearn/branch/main/graph/badge.svg", "   :target: https://codecov.io/gh/nilearn/nilearn", "   :alt: coverage status", "if you want to run the tests, you need pytest >= 3.9 and pytest-cov for coverage reporting."], "neuropredict": ["   classes), as well as allow you to **regress out covariates /"], "imbalanced-learn": ["|azure|_ |codecov|_ |circleci|_ |pythonversion|_ |pypi|_ |gitter|_ |black|_", ".. |codecov| image:: https://codecov.io/gh/scikit-learn-contrib/imbalanced-learn/branch/master/graph/badge.svg", ".. _codecov: https://codecov.io/gh/scikit-learn-contrib/imbalanced-learn", "  make coverage"], "imbalanced-ensemble": ["| [6] | n. v. chawla, a. lazarevic, l. o. hall, and k. w. bowyer, smoteboost: improving prediction of the minority class in boosting. in european conference on principles of data mining and knowledge discovery. springer, 2003, pp. 107\u2013119|"], "pyhsmm": ["transition matrix, the observation means and covariances, the duration"], "SKLL": [".. image:: https://codecov.io/gh/educationaltestingservice/skll/branch/main/graph/badge.svg", "  :target: https://codecov.io/gh/educationaltestingservice/skll"], "TensorFlow": ["[![contributor covenant](https://img.shields.io/badge/contributor%20covenant-v1.4%20adopted-ff69b4.svg)](code_of_conduct.md)"], "deap": ["  * ellefsen, kai olav, herman augusto lepikson, and jan c. albiez. \"multiobjective coverage path planning: enabling automated inspection of complex, real-world structures.\" applied soft computing 61 (2017): 264-282.", "  * v. akbarzadeh, c. gagn\u00e9, m. parizeau, m. argany, m. a mostafavi, \"probabilistic sensing model for sensor placement optimization based on line-of-sight coverage\", accepted in ieee transactions on instrumentation and measurement, 2012."], "mlxtend": ["[![codecov](https://codecov.io/gh/rasbt/mlxtend/branch/master/graph/badge.svg)](https://codecov.io/gh/rasbt/mlxtend)"], "neon": ["   already working on what you have uncovered."], "TPOT": ["[![master coverage status](https://coveralls.io/repos/github/epistasislab/tpot/badge.svg?branch=master)](https://coveralls.io/github/epistasislab/tpot?branch=master)", "[![development coverage status](https://coveralls.io/repos/github/epistasislab/tpot/badge.svg?branch=development)](https://coveralls.io/github/epistasislab/tpot?branch=development)", "running this code should discover a pipeline that achieves about 98% testing accuracy, and the corresponding python code should be exported to the `tpot_digits_pipeline.py` file and look similar to the following:"], "Orange": ["[![github actions](https://img.shields.io/endpoint.svg?url=https%3a%2f%2factions-badge.atrox.dev%2fbiolab%2forange3%2fbadge&label=build)](https://actions-badge.atrox.dev/biolab/orange3/goto) [![codecov](https://img.shields.io/codecov/c/github/biolab/orange3)](https://codecov.io/gh/biolab/orange3) [![contributor count](https://img.shields.io/github/contributors-anon/biolab/orange3)](https://github.com/biolab/orange3/graphs/contributors) [![latest github commit](https://img.shields.io/github/last-commit/biolab/orange3)](https://github.com/biolab/orange3/commits/master)"], "fuku-ml": [".. image:: https://codecov.io/github/fukuball/fuku-ml/coverage.svg?branch=master", "    :target: https://codecov.io/github/fukuball/fuku-ml?branch=master"], "PyTorch Lightning": ["[![codecov](https://codecov.io/gh/lightning-ai/lightning/branch/master/graph/badge.svg?token=smzx8mnkla)](https://codecov.io/gh/lightning-ai/lightning)", "###### \\*codecov is > 90%+ but build delays may show less"], "PyTorch Lightning Bolts": ["[![codecov](https://codecov.io/gh/lightning-ai/lightning-bolts/branch/master/graph/badge.svg?token=o8p0qhvj90)](https://codecov.io/gh/lightning-ai/lightning-bolts)"], "skorch": ["|build| |coverage| |docs| |huggingface| |powered|", ".. |coverage| image:: https://github.com/skorch-dev/skorch/blob/master/assets/coverage.svg", "    :alt: test coverage", "pytorch is not covered by the dependencies, since the pytorch version"], "Edward": ["[![coverage status](https://coveralls.io/repos/github/blei-lab/edward/badge.svg?branch=master&cachebuster=1)](https://coveralls.io/github/blei-lab/edward?branch=master)"], "modAL": ["[![travis-ci-master](https://travis-ci.org/modal-python/modal.svg?branch=master)](https://travis-ci.org/modal-python/modal) [![codecov-master](https://codecov.io/gh/modal-python/modal/branch/master/graph/badge.svg)](https://codecov.io/gh/modal-python/modal) [![readthedocs](https://readthedocs.org/projects/modal-python/badge/?version=latest)](http://modal-python.readthedocs.io/en/latest/?badge=latest)"], "Cogitare": ["\t<a href=\"https://codecov.io/gh/cogitare-ai/cogitare\">", "\t\t<img src=\"https://codecov.io/gh/cogitare-ai/cogitare/branch/master/graph/badge.svg\" />"], "mlens": ["[![coverage status](https://coveralls.io/repos/github/flennerhag/mlens/badge.svg?branch=master)](https://coveralls.io/github/flennerhag/mlens?branch=master)"], "Microsoft Recommenders": ["| term frequency - inverse document frequency (tf-idf) | content-based filtering | simple similarity-based algorithm for content-based recommendations with text datasets. it works in the cpu environment. | [quick  start](examples/00_quick_start/tfidf_covid.ipynb) |", "- l. zhang, t. wu, x. xie, a. argyriou, m. gonz\u00e1lez-fierro and j. lian, \"building production-ready recommendation system at scale\", *acm sigkdd conference on knowledge discovery and data mining 2019 (kdd 2019)*, 2019."], "StellarGraph": ["  <a href=\"https://codecov.io/gh/stellargraph/stellargraph\"><img src=\"https://codecov.io/gh/stellargraph/stellargraph/branch/develop/graph/badge.svg\" /></a>", "the stellargraph library offers state-of-the-art algorithms for [graph machine learning](https://medium.com/stellargraph/knowing-your-neighbours-machine-learning-on-graphs-9b7c3d0d5896), making it easy to discover patterns and answer questions about graph-structured data. it can solve many machine learning tasks:", "2. node2vec: scalable feature learning for networks. a. grover, j. leskovec. acm sigkdd international conference on knowledge discovery and data mining (kdd), 2016. ([link](https://snap.stanford.edu/node2vec/))", "acm sigkdd international conference on knowledge discovery and data mining (kdd), 135\u2013144, 2017", "4. attributed network embedding via subspace discovery. d. zhang, y. jie, x. zhu and c. zhang, data mining and knowledge discovery, 2019. ([link](https://link.springer.com/article/10.1007/s10618-019-00650-2))"], "Cornac": ["[![codecov](https://img.shields.io/codecov/c/github/preferredai/cornac/master.svg?logo=codecov)](https://codecov.io/gh/preferredai/cornac)"], "JAX": ["covering jax's ideas and capabilities in a more comprehensive and up-to-date"], "scikit-multiflow": ["[![codecov](https://codecov.io/gh/scikit-multiflow/scikit-multiflow/branch/master/graph/badge.svg)](https://codecov.io/gh/scikit-multiflow/scikit-multiflow)"], "bayeso": ["[![coverage status](https://coveralls.io/repos/github/jungtaekkim/bayeso/badge.svg?branch=main)](https://coveralls.io/github/jungtaekkim/bayeso?branch=main)"], "Determined": ["  out-of-the-box, covering code versions, metrics, checkpoints, and"], "sktime": ["| **ci/cd** | [![github-actions](https://img.shields.io/github/actions/workflow/status/sktime/sktime/wheels.yml?logo=github)](https://github.com/sktime/sktime/actions/workflows/wheels.yml) [![!codecov](https://img.shields.io/codecov/c/github/sktime/sktime?label=codecov&logo=codecov)](https://codecov.io/gh/sktime/sktime) [![readthedocs](https://img.shields.io/readthedocs/sktime?logo=readthedocs)](https://www.sktime.org/en/latest/?badge=latest) [![platform](https://img.shields.io/conda/pn/conda-forge/sktime)](https://github.com/sktime/sktime) |"], "Gradio": ["  [<img src=\"https://codecov.io/gh/gradio-app/gradio/branch/master/graph/badge.svg\" alt=\"codecov\">](https://app.codecov.io/gh/gradio-app/gradio)", "- components appear vertically in the app in the order they are created. (later we will cover customizing layouts!)", "a lot more going on here! we'll cover how to create complex `blocks` apps like this in the [building with blocks](https://github.com/gradio-app/gradio/tree/main/guides/3\\)building_with_blocks) section for you."], "Hub": ["    <a href=\"https://codecov.io/gh/activeloopai/hub/branch/master\"><img src=\"https://codecov.io/gh/activeloopai/hub/branch/master/graph/badge.svg\" alt=\"codecov\" height=\"18\"></a>"], "FEDOT": ["     - | |build| |coverage|", ".. |coverage| image:: https://codecov.io/gh/nccr-itmo/fedot/branch/master/graph/badge.svg", "   :alt: coverage status", "   :target: https://codecov.io/gh/nccr-itmo/fedot"], "Sklearn-genetic-opt": ["|tests|_ |codecov|_ |pythonversion|_ |pypi|_ |docs|_", ".. |codecov| image:: https://codecov.io/gh/rodrigo-arenas/sklearn-genetic-opt/branch/master/graphs/badge.svg?branch=master&service=github", ".. _codecov: https://codecov.io/github/rodrigo-arenas/sklearn-genetic-opt?branch=master"], "Optuna": ["[![codecov](https://codecov.io/gh/optuna/optuna/branch/master/graph/badge.svg)](https://codecov.io/gh/optuna/optuna/branch/master)"], "Deepchecks": ["[![coverage", "status](https://coveralls.io/repos/github/deepchecks/deepchecks/badge.svg?branch=main)](https://coveralls.io/github/deepchecks/deepchecks?branch=main)", "covering all kinds of common issues, such as:"], "Mars": ["|pypi version| |docs| |build| |coverage| |quality| |license|", ".. |coverage| image:: https://codecov.io/gh/mars-project/mars/branch/master/graph/badge.svg", "   :target: https://codecov.io/gh/mars-project/mars"], "NetworkX": [".. image:: https://codecov.io/gh/networkx/networkx/branch/main/graph/badge.svg", "   :target: https://app.codecov.io/gh/networkx/networkx/branch/main"], "igraph": ["custom installation of igraph is discoverable with `pkg-config`. first, check", "igraph instance discoverable with `pkg-config`:"], "Pandas": ["[![coverage](https://codecov.io/github/pandas-dev/pandas/coverage.svg?branch=main)](https://codecov.io/gh/pandas-dev/pandas)"], "Open Mining": [".. image:: https://coveralls.io/repos/github/mining/mining/badge.svg?branch=master", "    :target: https://coveralls.io/github/mining/mining?branch=master"], "PyMC": ["|build status| |coverage| |numfocus_badge| |binder| |dockerhub| |doizenodo|", "- the `\"learning bayesian statistics\" podcast <https://www.learnbayesstats.com/>`__ helps you discover and stay up-to-date with the vast bayesian community. bonus: it's hosted by alex andorra, one of the pymc core devs!", ".. |coverage| image:: https://codecov.io/gh/pymc-devs/pymc/branch/main/graph/badge.svg", "   :target: https://codecov.io/gh/pymc-devs/pymc"], "zipline": ["|coverage status|", ".. |coverage status| image:: https://coveralls.io/repos/quantopian/zipline/badge.svg", "   :target: https://coveralls.io/r/quantopian/zipline"], "SymPy": ["license: new bsd license (see the [license](license) file for details) covers all"], "statsmodels": ["|codecov coverage| |coveralls coverage| |pypi downloads| |conda downloads|", "  development and testing which is not considered \"production ready\".  this covers", ".. |codecov coverage| image:: https://codecov.io/gh/statsmodels/statsmodels/branch/main/graph/badge.svg", "   :target: https://codecov.io/gh/statsmodels/statsmodels", ".. |coveralls coverage| image:: https://coveralls.io/repos/github/statsmodels/statsmodels/badge.svg?branch=main", "   :target: https://coveralls.io/github/statsmodels/statsmodels?branch=main"], "astropy": ["    |actions status| |circleci status| |coverage status| |pypi status| |documentation status| |pre-commit| |isort status| |black| |zenodo|", ".. |coverage status| image:: https://codecov.io/gh/astropy/astropy/branch/main/graph/badge.svg", "    :target: https://codecov.io/gh/astropy/astropy", "    :alt: astropy's coverage status"], "matplotlib": ["[![codecov](https://codecov.io/github/matplotlib/matplotlib/badge.svg?branch=main&service=github)](https://codecov.io/github/matplotlib/matplotlib?branch=main)", "you've discovered a bug or something else you want to change -"], "bokeh": ["    <a href=\"https://codecov.io/gh/bokeh/bokeh\" >", "    <img src=\"https://img.shields.io/codecov/c/github/bokeh/bokeh?logo=codecov&style=for-the-badge&token=bhezgkduaw\"", "         alt=\"codecov coverage percentage\" />"], "pygal": ["[![coverage status](https://coveralls.io/repos/kozea/pygal/badge.svg?branch=master&service=github)](https://coveralls.io/github/kozea/pygal?branch=master)"], "Petrel": ["the use and distribution terms for this software are covered by the bsd 3-clause license 1.0 (http://opensource.org/licenses/bsd-3-clause) which can be found in the file license.txt at the root of this distribution. by using this software in any fashion, you are agreeing to be bound by the terms of this license. you must not remove this notice, or any other, from this software."], "Blaze": ["|build status| |coverage status| |join the chat at", ".. |coverage status| image:: https://coveralls.io/repos/blaze/blaze/badge.png", "   :target: https://coveralls.io/r/blaze/blaze"], "emcee": [".. image:: https://coveralls.io/repos/github/dfm/emcee/badge.svg?branch=main&style=flat&v=2", "    :target: https://coveralls.io/github/dfm/emcee?branch=main"], "vispy": ["|build status| |coverage status| |zenodo link| |contributor covenant|", ".. |coverage status| image:: https://img.shields.io/coveralls/vispy/vispy/main.svg", "   :target: https://coveralls.io/r/vispy/vispy?branch=main", ".. |contributor covenant| image:: https://img.shields.io/badge/contributor%20covenant-2.0-4baaaa.svg"], "Seaborn": ["[![code coverage](https://codecov.io/gh/mwaskom/seaborn/branch/master/graph/badge.svg)](https://codecov.io/gh/mwaskom/seaborn)", "to test the code, run `make test` in the source directory. this will exercise the unit tests (using [pytest](https://docs.pytest.org/)) and generate a coverage report."], "Superset": ["[![coverage status](https://codecov.io/github/apache/superset/coverage.svg?branch=master)](https://codecov.io/github/apache/superset)"], "visualize_ML": ["    correlation = covariance(x,y) / sqrt( var(x)*var(y))"], "Bowtie": ["|build status| |documentation status| |pypi version| |conda version| |pypi| |codecov| |prettier|", ".. |codecov| image:: https://codecov.io/gh/jwkvam/bowtie/branch/master/graph/badge.svg", "   :target: https://codecov.io/gh/jwkvam/bowtie"], "PyCM": ["<a href=\"https://codecov.io/gh/sepandhaghighi/pycm\">", "  <img src=\"https://codecov.io/gh/sepandhaghighi/pycm/branch/master/graph/badge.svg\" />"], "Lambdo": ["$ python -m unittest discover -s ./tests"], "dowel": ["[![codecov](https://codecov.io/gh/rlworkgroup/dowel/branch/master/graph/badge.svg)](https://codecov.io/gh/rlworkgroup/dowel)"], "CAEs for Data Assimilation": ["in this work, we propose a method of using autoencoders to model the background error covariance matrix, to greatly reduce the computational cost of solving 3d variational da **while increasing the quality of the data assimilation**."], "data-science-ipython-notebooks": ["  <img src=\"https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/coversmall_alt.png\">"], "Keras Tuner": ["[![codecov](https://codecov.io/gh/keras-team/keras-tuner/branch/master/graph/badge.svg)](https://codecov.io/gh/keras-team/keras-tuner)"], "nn_builder": ["1. add tests to the tests folder that cover any code you write"], "Jina AI": ["<a href=\"https://codecov.io/gh/jina-ai/jina\"><img alt=\"codecov branch\" src=\"https://img.shields.io/codecov/c/github/jina-ai/jina/master?&logo=codecov&logocolor=white&style=flat-square\"></a>"], "SLM Lab": ["# slm lab <br> ![github tag (latest semver)](https://img.shields.io/github/tag/kengz/slm-lab) ![ci](https://github.com/kengz/slm-lab/workflows/ci/badge.svg) [![maintainability](https://api.codeclimate.com/v1/badges/20c6a124c468b4d3e967/maintainability)](https://codeclimate.com/github/kengz/slm-lab/maintainability) [![test coverage](https://api.codeclimate.com/v1/badges/20c6a124c468b4d3e967/test_coverage)](https://codeclimate.com/github/kengz/slm-lab/test_coverage)"], "garage": ["[![codecov](https://codecov.io/gh/rlworkgroup/garage/branch/master/graph/badge.svg)](https://codecov.io/gh/rlworkgroup/garage)"], "Maze": ["our vision is to cover the complete development life cycle of rl applications ranging from simulation "]}